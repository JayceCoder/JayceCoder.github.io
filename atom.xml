<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jayce Blog</title>
  
  <subtitle>be what your wanna be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-16T02:20:54.242Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jayce</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java知识回顾</title>
    <link href="http://yoursite.com/2019/05/06/java01/"/>
    <id>http://yoursite.com/2019/05/06/java01/</id>
    <published>2019-05-06T07:20:36.000Z</published>
    <updated>2019-05-16T02:20:54.242Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java是什么？"><a href="#Java是什么？" class="headerlink" title="Java是什么？"></a>Java是什么？</h4><p><a href="https://baike.baidu.com/item/Java/85979" target="_blank" rel="noopener">Java</a>是一门<a href="https://baike.baidu.com/item/面向对象" target="_blank" rel="noopener">面向对象</a>编程语言，不仅吸收了<a href="https://baike.baidu.com/item/C%2B%2B" target="_blank" rel="noopener">C++</a>语言的各种优点，还摒弃了C++里难以理解的<a href="https://baike.baidu.com/item/多继承" target="_blank" rel="noopener">多继承</a>、<a href="https://baike.baidu.com/item/指针/2878304" target="_blank" rel="noopener">指针</a>等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程  。<br><br><br><br>Java具有简单性、面向对象、<a href="https://baike.baidu.com/item/分布式/19276232" target="_blank" rel="noopener">分布式</a>、<a href="https://baike.baidu.com/item/健壮性/4430133" target="_blank" rel="noopener">健壮性</a>、<a href="https://baike.baidu.com/item/安全性/7664678" target="_blank" rel="noopener">安全性</a>、平台独立与可移植性、<a href="https://baike.baidu.com/item/多线程/1190404" target="_blank" rel="noopener">多线程</a>、动态性等特点  。Java可以编写<a href="https://baike.baidu.com/item/桌面应用程序/2331979" target="_blank" rel="noopener">桌面应用程序</a>、<a href="https://baike.baidu.com/item/Web应用程序" target="_blank" rel="noopener">Web应用程序</a>、<a href="https://baike.baidu.com/item/分布式系统/4905336" target="_blank" rel="noopener">分布式系统</a>和<a href="https://baike.baidu.com/item/嵌入式系统/186978" target="_blank" rel="noopener">嵌入式系统</a>应用程序等</p><h4 id="JDK与JRE"><a href="#JDK与JRE" class="headerlink" title="JDK与JRE"></a>JDK与JRE</h4><ul><li><p>JRE(Java Runtime Environment)：Java运行环境，为Java的运行提供了环境.</p></li><li><p>JDK(Java Devolopment Kit)：Java开发工具包，提供了Java的开发环境与运行环境。</p><p>注:JDK包含了JRE也包含编译Java源码的Javac以及很多Java程序调试和分析的工具。如果只运行Java程序的话，只需要安装JRE就行了，要编写Java程序就需要安装JDK。</p></li></ul><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ol><li>整数类型<br><code>byte;short;int;long</code></li><li>浮点类型<br><code>float;double</code></li><li>字符类型<br><code>char</code></li><li>布尔类型<br><code>boolean</code></li></ol><h4 id="和equals"><a href="#和equals" class="headerlink" title="==和equals"></a>==和equals</h4><p>对于基本类型和引用类型==的作用效果是不一样的</p><ul><li>基本类型：比较的是值是否相同。</li><li>引用类型：比较的是引用是否相同。</li></ul><p>equals本质上就是==，只不过String和Integer等重写了equals方法，把它变成了值比较。</p><pre><code>- String a = &quot;string&quot;;- String b = &quot;string&quot;;- String c = new String(&quot;string&quot;);- Sytem.out.println(a==b);//true- Sytem.out.println(a==c);//false- Sytem.out.println(a.equals(b));//true- Sytem.out.println(a.equals(c));//true</code></pre><h4 id="final在Java中的作用"><a href="#final在Java中的作用" class="headerlink" title="final在Java中的作用"></a>final在Java中的作用</h4><ul><li>final修饰的类叫最终类，该类不能被继承。final不能修饰抽象类</li><li>final修饰的方法不能被重写。</li><li>final修饰的变量叫做常量，常量必须初始化，初始化之后不能被修改。</li></ul><h4 id="操作字符串的类"><a href="#操作字符串的类" class="headerlink" title="操作字符串的类"></a>操作字符串的类</h4><ul><li><code>String</code></li><li><code>StringBuffer</code></li><li><p><code>StringBuilder</code></p><p>  区别在于String声明的是不可变的对象，每次操作都会生产新的String对象，然后将指针指向新的String对象，而StringBuffer、StringBuilder可以在原有的基础上进行操作，所以经常改变字符串内容的情况下最好不使用String<br><br>StringBuffer和StringBuilder最大的区别在于，StringBuffer是线程安全的，StringBuilder是非线程安全的，但StringBuilder的性能却高于StringBuffer的，所以单线程下推荐使用StringBuilder，多线程下使用StringBuffer。</p></li></ul><h4 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h4><pre><code>- indexof();返回指定字符的索引- charAt();返回指定索引处的字符- replace();字符串替换- trim();去除字符串两端的空白- spilt();分割字符串，返回一个分割后的字符串数组- getBytes();返回字符串的byte类型数组- length();返回字符串长度- toLowerCase();将字符串转成小写字符- toUpperCase();将字符串转成大写字符- substring();截取字符串- equals();字符串比较</code></pre><h4 id="普通类和抽象类"><a href="#普通类和抽象类" class="headerlink" title="普通类和抽象类"></a>普通类和抽象类</h4><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法</li><li>抽象类不能直接实例化，普通类可以直接实例化</li></ul><h4 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h4><ul><li>实现：抽象类的子类使用extends继承，接口必须使用implements实现</li><li>构造函数：抽象类可以有构造函数，接口不能有</li><li>实现数量：类可以实现很多个接口，但是只能继承一个抽象类</li><li>访问修饰符：接口中的默认方法是public修饰，抽象类中的方法可以使任意访问修饰符</li></ul><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><ul><li>按功能来分：输入流（input） 、输出流（output）</li><li>按类型来分：字节流和字符流</li><li>字符流和字节流的区别是字节流按8位传输以字节位单位输入输出数据，字符流按16位传输以字符为单位输入输出数据</li></ul><h4 id="BIO、BIO、AIO"><a href="#BIO、BIO、AIO" class="headerlink" title="BIO、BIO、AIO"></a>BIO、BIO、AIO</h4><ul><li>BIO：Block IO 同步阻塞式IO，就是平常使用的传统IO，他的特点是模式简单使用方便，并发处理能力低</li><li>NIO：New IO同步非阻塞式IO，是传统IO的升级，客户端和服务端通过Channel（通道）通讯，实现了多路复用</li><li>AIO：Asynchronous IO是NIO的升级，也叫NIO2，实现了异步非阻塞式IO，异步IO的操作基于事件和回调机制</li></ul><h4 id="Files的常用方法"><a href="#Files的常用方法" class="headerlink" title="Files的常用方法"></a>Files的常用方法</h4><ul><li>Files.exists();检测文件路径是否存在</li><li>Files.createFile();创建文件</li><li>Files.createDirectory();创建文件夹</li><li>Files.delete();删除一个文件或者目录</li><li>Files.copy();复制文件</li><li>Files.move();移动文件</li><li>Files.size();查看文件个数</li><li>Files.read();读取文件</li><li>Files.write();写入文件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java是什么？&quot;&gt;&lt;a href=&quot;#Java是什么？&quot; class=&quot;headerlink&quot; title=&quot;Java是什么？&quot;&gt;&lt;/a&gt;Java是什么？&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/Java/859
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://yoursite.com/2019/05/06/CreateBlogByHexo/"/>
    <id>http://yoursite.com/2019/05/06/CreateBlogByHexo/</id>
    <published>2019-05-06T07:20:36.000Z</published>
    <updated>2019-05-09T05:50:34.472Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用hexo搭建个人博客"><a href="#使用hexo搭建个人博客" class="headerlink" title="使用hexo搭建个人博客"></a>使用hexo搭建个人博客</h4><ol><li>安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a>安装完之后使用cmd命令查看是否安装成功<br> <code>git --version</code></li><li>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>安装完之后使用cmd命令查看是否安装成功<br> <code>node --version</code></li><li>安装hexo<br> 在桌面任意位置单击右键，选择Git Base<br>输入命令<br><code>npm install -g hexo</code> <br>注:-g表示全局安装</li><li>在任意位置(你需要存放博客的本地地址)先创建一个hexo文件夹<br>空白位置鼠标右键选择Git Base<br>输入以下命令初始化hexo模板<br><code>hexo init</code><br>刷新下可以看到如图所示结构<br><img src="/img/hexoinit.jpg" alt="hexo init文件目录"><br><img src="/img/hexolist.jpg" alt="hexo init文件目录"><br>输入以下命令安装nodejs依赖包<br><code>npm install</code><br>输入以下命令构建静态页面<br><code>hexo generate</code><br>输入以下命令启动本地服务<br><code>hexo server</code><br>启动后   输入路径localhost:4000到游览器即可看到效果了</li><li>常用hexo命令<br>创建新页面<code>hexo new page ***</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用hexo搭建个人博客&quot;&gt;&lt;a href=&quot;#使用hexo搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;使用hexo搭建个人博客&quot;&gt;&lt;/a&gt;使用hexo搭建个人博客&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;安装 &lt;a href=&quot;https://git-
      
    
    </summary>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>常用dos命令</title>
    <link href="http://yoursite.com/2019/05/06/s1/"/>
    <id>http://yoursite.com/2019/05/06/s1/</id>
    <published>2019-05-06T07:20:36.000Z</published>
    <updated>2019-05-16T02:31:41.298Z</updated>
    
    <content type="html"><![CDATA[<h5 id="常用dos命令"><a href="#常用dos命令" class="headerlink" title="常用dos命令"></a>常用dos命令</h5><pre><code>d: 去往D盘cd.. 返回上一级目录cd 文件名 目录切换到该文件名（子目录）下cd \ 直接回根目录dir 当前根目录下的文件目录dir /s 所有目录dir/p 目录多的时候，p用来分屏，显示完一屏后停下来dir/w 所有文件一屏内显示，只显示文件和子目录dir *.bat 显示所有扩展名是bat的文件,*代表任意字符。*为通配符，可代表多个字符，在分隔符前起作用dir a* 显示所有文件名是a的文件，*代表任意字符dir a? 显示所有文件名是以a开头，并只有2个字母，？代表任意字符。?为通配符，只能代表1个字符，在分隔符前起作用dir /ta 显示目录的文件上次访问时间 accessdir /tc 显示目录的文件创建时间 creatmd 文件名 创建目录-make directoryrd 文件名 移除目录-remove directory 移除的目录中不能有子目录和文件，不能删除当前目录copy con 1.txt 建立文件名为1的txt文档 建立后直接跳到文档内容，ctrl+z完成内容编辑del 1.txt 删除文件名为1的txt文档 del仅用于文档，rd用于文件ren 文件名 新文件名 重命名type 1.txt 显示文件1.txt的内容 一般只适用于txttree 显示文件目录树，含最底层目录echo 显示此命令后的字符echo off 在此语句后所有运行的命令都不显示命令行本身pause 暂停Ctrl+C 中断操作 比如运行tree很长的时候鼠标右键-标注 可选中文本鼠标操作-粘贴 可粘贴文本F7 查看之前执行的命令 MAC下的win系统，需要加Fnhelp 指令帮助cls 清除屏幕ver 查看系统版本date 查看日期time 查看时间ipconfig 查看电脑和网络地址ipconfig /all 显示所有网络适配器的完整TCP/IP配置信息winver 查看windows系统版本notepad 打开记事本程序mspaint 打开画图程序calc 打开计算机程序mstsc 远程桌面连接-Microsoft Terminal Server Connectionregedit 注册表编辑器devmgmt 设备管理器程序-device managementtaskmgr 任务管理器-task managertasklist 显示计算机进程appwiz.cpl 添加/删除程序-application wizardncpa.cpl 网络连接属性-network control panel appletfirewall.cpl 防火墙control 打开控制面板Tab键 补全文件名</code></pre><p>​            </p><p>　　    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;常用dos命令&quot;&gt;&lt;a href=&quot;#常用dos命令&quot; class=&quot;headerlink&quot; title=&quot;常用dos命令&quot;&gt;&lt;/a&gt;常用dos命令&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;d: 去往D盘

cd.. 返回上一级目录

cd 文件名 目录切换到该文件名（子目
      
    
    </summary>
    
      <category term="dos" scheme="http://yoursite.com/categories/dos/"/>
    
    
      <category term="IT" scheme="http://yoursite.com/tags/IT/"/>
    
  </entry>
  
</feed>
