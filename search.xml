<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初识JVM</title>
      <link href="/2019/07/12/%E5%88%9D%E8%AF%86JVM/"/>
      <url>/2019/07/12/%E5%88%9D%E8%AF%86JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="Java运行时数据区域"><a href="#Java运行时数据区域" class="headerlink" title="Java运行时数据区域"></a>Java运行时数据区域</h2><p>Java虚拟机在执行Java程序时，会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁时间，有些区域会随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p><p><img src="\img\1562812338881.png" alt="1562812338881"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器是一块较小的内存空间，它可以看作当前线程执行字节码文件时的行号指示器，在虚拟机的概念模型里，字节码解释器的工作就是通过改变计数器的值来选取下一条需要执行的字节码指令。</p><p>由于Java虚拟机的多线程是线程轮流切换并分配处理器执行时间的方式实现的，在任何一个确定的时刻，一个处理器只会执行一条线程中的指令。因此为了线程切换后能恢复到正确的执行位置，每个线程都有独立的程序计数器，各条线程之间程序计数器互不影响，独立储存，我们称这类内存区域为“线程私有”的内存。</p><p>如果线程正在执行的是一个java方法，那么程序计数器记录的就是正在执行的虚拟机字节码指令地址；如果线程正在执行的是一个native方法，那么程序计数器记录的值为null。</p><p>此内存区域是唯一一个在虚拟机内存规范中没有规定任何OutOfMemoryError情况的区域。</p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>虚拟机栈也是线程私有的，他的生命周期和线程相同。虚拟机栈描述的是java方法执行时的内存模型：每个方法执行的同时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接方法出口等信息。每个方法从调用直至执行完成的过程就对应一个栈帧从虚拟机中从入栈到出栈的过程。</p><p>局部变量表存放了编译器可知的各种基础数据类型、医用类型和ReturnAddress类型。</p><p>在Java虚拟机规范中，对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈是虚拟机适用到的native方法服务的，虚拟机规范中没有对本地方法栈使用的语言、使用方式、数据结构进行强制规定，因此具体的虚拟机可以自由的实现它。有的虚拟机把本地方法栈和虚拟机栈合二为一(如HotSpot虚拟机)，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>对于大多数应用来说，Java堆是虚拟机内存中最大的一块，Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在Java堆中分配内存。</p><p>Java堆是垃圾收集器管理的主要区域，因此很多时刻也被称为“GC堆”。从内存回收的角度来看，由于现在收集器基 本都采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有 Eden空间、From Survivor空间、To Survivor空间等。从内存分配的角度来看，线程共享的 Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer,TLAB）。不 过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划 分的目的是为了更好地回收内存，或者更快地分配内存。</p><p>根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。不过在实现上，既可以实现成固定大小的也可以实现成可扩展的，当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制)。如果在堆中没有内存来完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚 拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规 范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆）。</p><h3 id="运行时常量"><a href="#运行时常量" class="headerlink" title="运行时常量"></a>运行时常量</h3><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版 本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于 存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常 量池中存放。 </p><hr><p>—–学习自《深入理解Java虚拟机》</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础01</title>
      <link href="/2019/07/10/java%E5%9F%BA%E7%A1%8001/"/>
      <url>/2019/07/10/java%E5%9F%BA%E7%A1%8001/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Java语言"><a href="#什么是Java语言" class="headerlink" title="什么是Java语言"></a>什么是Java语言</h3><p>Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。</p><h3 id="Java语言发展历史"><a href="#Java语言发展历史" class="headerlink" title="Java语言发展历史"></a>Java语言发展历史</h3><ul><li>1995年Sun公司发布Java1.0版本</li><li>1997年发布Java1.1版本</li><li>1998年发布Java1.2版本</li><li>2000年发布Java1.3版本</li><li>2002年发布Java1.4版本</li><li>2004年发布Java 5版本</li><li>2006年发布Java 6版本</li><li>2009年Oracle甲骨文公司收购Sun公司，并与2011年发布Java 7版本</li><li>2014年发布Java 8版本</li><li>2017年9月发布Java 9版本</li><li>2018年3月发布Java 10版本</li></ul><h3 id="计算机进制转换"><a href="#计算机进制转换" class="headerlink" title="计算机进制转换"></a>计算机进制转换</h3><p><img src="/img/1562766826167.png" alt="1562766826167"></p><h3 id="计算机存储单元"><a href="#计算机存储单元" class="headerlink" title="计算机存储单元"></a>计算机存储单元</h3><p>位(bit)：一个数字0或者一个数字1，代表一位。</p><p>字节(Byte)：每逢8位是一个字节，这是数据存储的最小单位。</p><p>1Byte = 8bit</p><p>1KB=1024Byte</p><p>1MB=1024KB</p><p>1GB=1024MB</p><p>1TB=1024GB</p><h3 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h3><p>MS-DOS（MicroSoft-Disk Operating System）</p><p>命令提示符（cmd）</p><p>启动：Win+R，输入cmd回车</p><p>切换盘符：盘符名称:</p><p>进入文件夹：cd 文件夹名</p><p>进入多级文件夹：cd 文件夹1\文件夹2、\文件夹3</p><p>返回上一级：cd..</p><p>清屏：cls</p><p>直接回根目录：cd \</p><p>查看当前内容：dir</p><p>退出：exit</p><h3 id="Java语言的跨平台性"><a href="#Java语言的跨平台性" class="headerlink" title="Java语言的跨平台性"></a>Java语言的跨平台性</h3><ul><li>JVM（Java Virtual Machine）：java虚拟机，简称JVM，是运行所以java程序的家乡计算机，是Java程序的运行环境，是Java最具希灵里的特征之一。我们编写的Java代码，都运行在JVM之上。</li><li>跨平台：任何软件的运行都必须运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM之上，而JVM运行在操作系统之上。</li></ul><p><img src="/img/1562770008146.png" alt="1562770008146"></p><h3 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h3><ul><li><p>JRE（Java Runtime Enviroment）：是Java程序的运行时环境，包含JVM和运行时所需的核心类库。</p></li><li><p>JDK（Java Devolopment Kit）：是Java程序的开发工具包，包含JRE和开发人员使用的工具。</p><p>我们想要运行一个已有的Java程序，只需要安装JRE即可</p><p>我们想要开发一个全新的Java程序，那么需要安装JDK。</p></li></ul><p><img src="/img/1562770238299.png" alt="1562770238299"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建个人博客</title>
      <link href="/2019/05/06/CreateBlogByHexo/"/>
      <url>/2019/05/06/CreateBlogByHexo/</url>
      
        <content type="html"><![CDATA[<h4 id="使用hexo搭建个人博客"><a href="#使用hexo搭建个人博客" class="headerlink" title="使用hexo搭建个人博客"></a>使用hexo搭建个人博客</h4><ol><li>安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a>安装完之后使用cmd命令查看是否安装成功<br> <code>git --version</code></li><li>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>安装完之后使用cmd命令查看是否安装成功<br> <code>node --version</code></li><li>安装hexo<br> 在桌面任意位置单击右键，选择Git Base<br>输入命令<br><code>npm install -g hexo</code> <br>注:-g表示全局安装</li><li>在任意位置(你需要存放博客的本地地址)先创建一个hexo文件夹<br>空白位置鼠标右键选择Git Base<br>输入以下命令初始化hexo模板<br><code>hexo init</code><br>刷新下可以看到如图所示结构<br><img src="/img/hexoinit.jpg" alt="hexo init文件目录"><br><img src="/img/hexolist.jpg" alt="hexo init文件目录"><br>输入以下命令安装nodejs依赖包<br><code>npm install</code><br>输入以下命令构建静态页面<br><code>hexo generate</code><br>输入以下命令启动本地服务<br><code>hexo server</code><br>启动后   输入路径localhost:4000到游览器即可看到效果了</li><li>常用hexo命令<br>创建新页面<code>hexo new page ***</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> it </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用dos命令</title>
      <link href="/2019/05/06/s1/"/>
      <url>/2019/05/06/s1/</url>
      
        <content type="html"><![CDATA[<h5 id="常用dos命令"><a href="#常用dos命令" class="headerlink" title="常用dos命令"></a>常用dos命令</h5><pre><code>d: 去往D盘cd.. 返回上一级目录cd 文件名 目录切换到该文件名（子目录）下cd \ 直接回根目录dir 当前根目录下的文件目录dir /s 所有目录dir/p 目录多的时候，p用来分屏，显示完一屏后停下来dir/w 所有文件一屏内显示，只显示文件和子目录dir *.bat 显示所有扩展名是bat的文件,*代表任意字符。*为通配符，可代表多个字符，在分隔符前起作用dir a* 显示所有文件名是a的文件，*代表任意字符dir a? 显示所有文件名是以a开头，并只有2个字母，？代表任意字符。?为通配符，只能代表1个字符，在分隔符前起作用dir /ta 显示目录的文件上次访问时间 accessdir /tc 显示目录的文件创建时间 creatmd 文件名 创建目录-make directoryrd 文件名 移除目录-remove directory 移除的目录中不能有子目录和文件，不能删除当前目录copy con 1.txt 建立文件名为1的txt文档 建立后直接跳到文档内容，ctrl+z完成内容编辑del 1.txt 删除文件名为1的txt文档 del仅用于文档，rd用于文件ren 文件名 新文件名 重命名type 1.txt 显示文件1.txt的内容 一般只适用于txttree 显示文件目录树，含最底层目录echo 显示此命令后的字符echo off 在此语句后所有运行的命令都不显示命令行本身pause 暂停Ctrl+C 中断操作 比如运行tree很长的时候鼠标右键-标注 可选中文本鼠标操作-粘贴 可粘贴文本F7 查看之前执行的命令 MAC下的win系统，需要加Fnhelp 指令帮助cls 清除屏幕ver 查看系统版本date 查看日期time 查看时间ipconfig 查看电脑和网络地址ipconfig /all 显示所有网络适配器的完整TCP/IP配置信息winver 查看windows系统版本notepad 打开记事本程序mspaint 打开画图程序calc 打开计算机程序mstsc 远程桌面连接-Microsoft Terminal Server Connectionregedit 注册表编辑器devmgmt 设备管理器程序-device managementtaskmgr 任务管理器-task managertasklist 显示计算机进程appwiz.cpl 添加/删除程序-application wizardncpa.cpl 网络连接属性-network control panel appletfirewall.cpl 防火墙control 打开控制面板Tab键 补全文件名</code></pre><p>​            </p><p>　　    </p>]]></content>
      
      
      <categories>
          
          <category> dos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<ul><li>一枚java程序员，爱好数码产品</li><li>年轻的时候学东西一学就会，老了就忘记许多，需要记笔记了。</li><li>每天进步一点点</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>favicons</title>
      <link href="/favicons/index.html"/>
      <url>/favicons/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>img</title>
      <link href="/img/index.html"/>
      <url>/img/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
